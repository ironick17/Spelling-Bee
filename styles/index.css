/**
 * index.scss
 * - Add any styles you want here!
**/

/**
This section is to draw reference lines for debugging screen size issues.
#hb {
  width: 972px;
  height: 10px;
  background-color: red;
  z-index: 2;
  position: absolute;
  top: 300px;
  left: 0;
}

#vb {
  height: 1728px;
  width: 10px;
  background-color: red;
  z-index: 3;
  position: absolute;
  left: 180px;
  top: 0;
}
**/

/* I don't like serifs. */
body {
  font-family: sans-serif;
}

/* Only one h1 in my whole app. */
h1 {
  text-align: center;
  font-size: medium;
  margin-bottom: 0;
}

h2 {
  margin-top: 0;
  text-align: center;
  font-size: medium;
}

/* For the popup message showing the game levels. */
#levelsHdr {
  margin: 0 0 4px 0;
}

#yesterdayHdr {
  margin: 0 0 6px 0;
}

/**
The writing-mode property is a workaround for a flex box bug. See here for a
discussion of the bug: https://github.com/philipwalton/flexbugs#flexbug-14 .
This should be just a simple flex box with flex-direction column. But the
contining box won't automatically expand as new columns are added. So we have
to trick the rendering engine to think that our columns are actually rows.
**/

#displayAnswers {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  writing-mode: vertical-lr;
}
.flexP {
  margin: 0;
  font-size: x-small;
  writing-mode: horizontal-tb;
}

.centerLetter,
.outerLetter {
  font-size: large;
  font-weight: bold;
}

/* Crude vertical positioning. */
#hexagonButtons {
  margin: 40px auto;
}

/* I should probably use flex for evenly spacing these horizontally. */
#controls {
  margin-left: auto;
  margin-right: auto;
  width: fit-content;
}

/* These are the delete, submit, etc. buttons. */
.control {
  margin: 10px;
  border-color: black;
  border-width: thin;
  background-color: white;
}

/* Horizontal positioning. Should switch to flex. */
#wordGuessField {
  margin-left: auto;
  margin-right: auto;
  display: block;
}

/* Using flex to center gameScore and gameRank. */
#currentResults {
  display: flex;
  flex-direction: row;
  width: fit-content;
  margin: 0 auto;
}

/* Crude positioning. */
#gameScore,
#gameRank {
  margin: 20px;
}

.rankP {
  margin: 0;
}

/* Crude sizing. */
#gameScoreField {
  width: 30px;
}

/* Crude sizing. */
#gameRankField {
  width: 100px;
}

/* Crude positioning and sizing. */
#answers {
  margin: 0 auto;
  width: 200px;
}

/* Crude positioning. */
#answersHdr {
  margin-bottom: 0;
  text-align: center;
}

/*
This is the popup used throughout the game.
I suppose I should rename it just to popup.
Originally I only used it when the Submit button
was pressed.
*/
#submitPopup {
  visibility: hidden;
  background: white;
  border-color: black;
  border-width: thin;
  border-style: solid;
  padding: 8px;
}

/*
This hidden flex container fills the entire body so
I can position the submitPopup in the cent of the page.
The color red is just so I can see it when debugging.
*/
#submitPopupContainer {
  visibility: hidden;
  background: red;
  display: flex;
  z-index: 1;
  justify-content: center;
  align-items: center;
  margin: auto;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  position: absolute;
}

/*
The gameStart dialog box appears when the game starts.
It fills the whole screen and hides the actual game
(hence the z-index) until everything is initialized.
*/
#gameStart {
  background: white;
  border-color: black;
  display: flex;
  flex-direction: column;
  z-index: 1;
  justify-content: center;
  align-items: center;
  margin: auto;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  position: absolute;
}

/* Crude sizing. */
#playerInput {
  width: 200px;
}

#playerInputLabel {
  font-size: small;
}

#startBtns {
  margin: 10px;
}

#dialogBtn {
  border-color: black;
  border-width: thin;
  background-color: white;
}

/*
This hexagon grid was derived from:
From https://codepen.io/ericornelissen/pen/vWbWKv
I don't fully understand the hack to use borders to create the hexgon shape.
I also don't fully understand they lay them out in a grid.
So I didn't manually lay out exactly the hexgons I need for the game.
I just display a "full" grid and hide the unused hexagons.
*/

/* For hiding the unused hexagons of the grid. */
.hide {
  visibility: hidden;
}

:root {
  /* Change this to change the appearance of the hexaons */
  --hex-width: 70px;
  --hex-between: 10px;

  /* Other hexagon dimentions */
  --hex-height: calc(var(--hex-width) / 1.73);
  --hex-margin: calc(var(--hex-width) / 2);
  --hex-border: calc(var(--hex-margin) / 1.73);
  --hex-transition: all 0.2s ease;

  /* Colors */
  --color-hex-default: #e6e6e6;
  --color-hex-hover: #b1b1b1;
  --color-hex-cntrLtr-default: #f8cd05; /* lighter yellow */
  --color-hex-cntrLtr-hover: #e19d03; /* darker yellow */
}

/* Hexagons */
.hexagon-container {
  display: grid;
  grid-template-columns: var(--hex-width) var(--hex-width) var(--hex-width) var(
      --hex-width
    );
  grid-auto-rows: calc(var(--hex-width) - 28.87px / 2);
  grid-gap: var(--hex-between) var(--hex-between);
  padding-bottom: var(--hex-border);
  width: fit-content;
}
.hexagon {
  align-items: center;
  background-color: var(--color-hex-default);
  cursor: pointer;
  display: flex;
  fill: white;
  height: var(--hex-height);
  justify-content: center;
  margin: var(--hex-border) 0;
  position: relative;
  transition: var(--hex-transition);
  width: var(--hex-width);
}

.hexagon::after,
.hexagon::before {
  border-left: var(--hex-margin) solid transparent;
  border-right: var(--hex-margin) solid transparent;
  content: '';
  left: 0;
  position: absolute;
  transition: var(--hex-transition);
  width: 0;
}
.hexagon::after {
  border-top: var(--hex-border) solid var(--color-hex-default);
  top: 100%;
  width: 0;
}
.hexagon::before {
  border-bottom: var(--hex-border) solid var(--color-hex-default);
  bottom: 100%;
}

.hexagon:hover {
  background-color: var(--color-hex-hover);
}
.hexagon:hover::after,
.hexagon:hover::before {
  border-top-color: var(--color-hex-hover);
  border-bottom-color: var(--color-hex-hover);
}

.hexagon:nth-child(8n + 5),
.hexagon:nth-child(8n + 6),
.hexagon:nth-child(8n + 7),
.hexagon:nth-child(8n + 8) {
  margin-left: calc(var(--hex-width) / 2 + var(--hex-between) / 2);
}

.centerLetter {
  background-color: var(--color-hex-cntrLtr-default);
}

.centerLetter::after {
  border-top: var(--hex-border) solid var(--color-hex-cntrLtr-default);
}

.centerLetter::before {
  border-bottom: var(--hex-border) solid var(--color-hex-cntrLtr-default);
}

.centerLetter:hover {
  background-color: var(--color-hex-cntrLtr-hover);
}
.centerLetter:hover::after,
.centerLetter:hover::before {
  border-top-color: var(--color-hex-cntrLtr-hover);
  border-bottom-color: var(--color-hex-cntrLtr-hover);
}
